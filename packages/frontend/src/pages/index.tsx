import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'

import { Button, ButtonGroup, Heading, HStack, Link, VStack, } from '@chakra-ui/react'
import { ExternalLinkIcon } from '@chakra-ui/icons'
import {
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  StatGroup,
} from '@chakra-ui/react'

import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react'
import abi from '../dapps/contracts/abi.json'

import { useAddress, useDisconnect, useMetamask, useSigner } from "@thirdweb-dev/react";
import { ethers } from 'ethers'

const contractAddressMumbai = '0x2bC9E6A36a8B98B02Cc4C63E3863Bc7ac3d01429';

const batterContractAddress = '0x2bC9E6A36a8B98B02Cc4C63E3863Bc7ac3d01429'

type GameBoard = {
  totalScore: string,
  bases: number,
  outs: string,
}

const Home: NextPage = () => {
  const connectWithMetamask = useMetamask();
  const disconnect = useDisconnect()
  const address = useAddress()
  const signer = useSigner()

  const [contractReady, setContractReady] = useState<boolean>(false)
  const [contract, setContract] = useState<ethers.Contract>()
  const [provider, setProvider] = useState<ethers.providers.BaseProvider>()

  const [boardReady, setBoardReady] = useState<boolean>(false)
  const [board, setBoard] = useState<GameBoard>()

  //  fetch game board
  useEffect(() => {
    const p = ethers.getDefaultProvider('https://rpc-mumbai.maticvigil.com/')
    setProvider(p)

    p.getNetwork().then(x => console.log('network', x.chainId))
    p.getBlockNumber().then(x => console.log('height', x.toString()))
  },[])

  useEffect(() => {
    if(!signer) {
      setBoard(undefined)
      return
    }
    const contract = new ethers.Contract(contractAddressMumbai, abi, signer);
    const fetchCurrentGame = async () => {
      const totalScore = await contract.totalScore()
      const bases = await contract.bases()
      const outs = await contract.outs()
      console.log('score', totalScore)
      console.log('bases', bases)
      console.log('outs', outs)
      setContract(contract)
      setContractReady(true)
      setBoard({
        totalScore: totalScore.toString(),
        outs: outs,
        bases: bases.toString(),
      })
    }
    fetchCurrentGame()
  }, [signer])

  // fetch address data
  useEffect(() => {
    if(address){
      console.log('address:', address)
    }
  }, [address])

  useEffect(() => {
    signer?.getBalance().then(x => console.log('signer:', x?.toString()))
  }, [signer])

  const trigger = (address: string, tokenId: number) => {
    if(!contract) {
      return
    }
    const inner = async () => {
      const result = await contract.trigger(address, tokenId)
      return result
    }
    inner().then(x => console.log(x))
  }
  const reveal = () => {
    if(!contract) {
      return
    }
    const inner = async () => {
      const result = await contract.reveal()
      return result
    }
    inner().then(x => console.log(x))
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <VStack margin={32}>
        <Heading>NFT Baseball</Heading>
        <StatGroup>
          <Stat margin={10}>
            <StatLabel>Score</StatLabel>
            <StatNumber>{board?.totalScore ?? '-'}</StatNumber>
          </Stat>

          <Stat margin={10}>
            <StatLabel>Outs</StatLabel>
            <StatNumber>{board?.outs ?? '-'}</StatNumber>
          </Stat>

          <Stat margin={10}>
            <StatLabel>Runners</StatLabel>
            <StatNumber>{toBaseString(board?.bases ?? 0)}</StatNumber>
          </Stat>
        </StatGroup>
        <Button colorScheme='teal' onClick={() => !address ? connectWithMetamask() : disconnect()}>
          { !address ? "Connect Wallet" : "Disconnect"}
        </Button>
        {address ? (
          <Link href={`https://mumbai.polygonscan.com/address/${address}`} isExternal>
          {address} <ExternalLinkIcon mx='2px'/>
        </Link>
        ) : (<p>not connected</p>)}
        <HStack margin={10}>
          <Button onClick={() => trigger(batterContractAddress, 1)} colorScheme='blue' disabled={!address} variant='outline'>
            trigger
          </Button>
          <Button onClick={() => reveal()} colorScheme='blue' disabled={!address} variant='outline'>
            reveal
          </Button>
        </HStack>
      </VStack>
  
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

const toBaseString = (n: number): string => {
  let baseString = ''
  if ((n & 0x04) == 0x04) {
    baseString += '-'
  }else{
    baseString += ' '
  }

  if ((n & 0x02) == 0x02) {
    baseString += 'o\u0305'
  }else{
    baseString += 'o'
  }

  if ((n & 0x01) == 0x01) {
    baseString += '-'
  }else{
    baseString += ' '
  }

  return baseString
}

export default Home
