{
  "address": "0xD7E82F9Fb70dEDC0a15deA3c5cc1d1CADaA3b463",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "batter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "result",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bases",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "outs",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalScore",
          "type": "uint256"
        }
      ],
      "name": "PlayResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bases",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "maxCount",
          "type": "uint8"
        }
      ],
      "name": "claimNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingPlay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "batter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseballBoardGame.PendingPlay",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outs",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "trigger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4517cf37027d547849524f66f568faef19d335c5bcd1c249eb5e8255e0e7aa4a",
  "receipt": {
    "to": null,
    "from": "0x92561F28Ec438Ee9831D00D1D59fbDC981b762b2",
    "contractAddress": "0xD7E82F9Fb70dEDC0a15deA3c5cc1d1CADaA3b463",
    "transactionIndex": 1,
    "gasUsed": "4022649",
    "logsBloom": "0x
    "blockHash": "0x79e3e1689033472fc5fb96dc7e59cd09a8d9f064881884624cd90f5c46dcd8af",
    "transactionHash": "0x4517cf37027d547849524f66f568faef19d335c5bcd1c249eb5e8255e0e7aa4a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26237865,
        "transactionHash": "0x4517cf37027d547849524f66f568faef19d335c5bcd1c249eb5e8255e0e7aa4a",
        "address": "0xD7E82F9Fb70dEDC0a15deA3c5cc1d1CADaA3b463",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092561f28ec438ee9831d00d1d59fbdc981b762b2"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x79e3e1689033472fc5fb96dc7e59cd09a8d9f064881884624cd90f5c46dcd8af"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 26237865,
        "transactionHash": "0x4517cf37027d547849524f66f568faef19d335c5bcd1c249eb5e8255e0e7aa4a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000092561f28ec438ee9831d00d1d59fbdc981b762b2",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000072549fa3ee25b100000000000000000000000000000000000000000000000001eae189f9ef8b5400000000000000000000000000000000000000000000151cf854d8016123b73900000000000000000000000000000000000000000000000001788cea560165a300000000000000000000000000000000000000000000151cf8c72ca10511dcea",
        "logIndex": 2,
        "blockHash": "0x79e3e1689033472fc5fb96dc7e59cd09a8d9f064881884624cd90f5c46dcd8af"
      }
    ],
    "blockNumber": 26237865,
    "cumulativeGasUsed": "9295229",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a75ad82369aeaae04054dee56123a17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"batter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bases\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"outs\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalScore\",\"type\":\"uint256\"}],\"name\":\"PlayResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bases\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"maxCount\",\"type\":\"uint8\"}],\"name\":\"claimNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingPlay\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"batter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseballBoardGame.PendingPlay\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"trigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BaseballBoardGame\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseballBoardGame.sol\":\"BaseballBoardGame\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BaseballBoardGame.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title BaseballBoardGame\\n */\\ncontract BaseballBoardGame is ERC721, ERC721URIStorage, ERC721Burnable, ReentrancyGuard, Ownable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private tokenIdCounter;\\n\\n    uint8 public bases;\\n    uint8 public outs;\\n    uint public totalScore;\\n    mapping(address => uint) public claimableCounts;\\n    PendingPlay private pendingPlay;\\n\\n    struct PendingPlay {\\n        address batter;\\n        uint blockNumber;\\n        address contractAddress;\\n        uint256 tokenId;\\n    }\\n\\n    event PlayResult(address batter, string result, uint score, uint8 bases, uint8 outs, uint totalScore);\\n\\n    constructor() ERC721(\\\"AwardNFT\\\", \\\"AWARD\\\") Ownable() ReentrancyGuard() {\\n        bases = 0;\\n        outs = 0;\\n        totalScore = 0;\\n    }\\n\\n    function trigger(address contractAddress, uint256 tokenId) public nonReentrant returns (uint) {\\n        address batter = msg.sender;\\n\\n        // TODO: Disallow triggeringmore than once.\\n        require(IERC721(contractAddress).ownerOf(tokenId) == batter, \\\"Only the owner of specified NFT can trigger.\\\");\\n\\n        revealInner();\\n        pendingPlay = PendingPlay(batter, block.number, contractAddress, tokenId);\\n        return totalScore;\\n    }\\n\\n    function reveal() public nonReentrant returns (uint) {\\n        revealInner();\\n        return totalScore;\\n    }\\n\\n    function getPendingPlay() public view returns (PendingPlay memory) {\\n        return pendingPlay;\\n    }\\n\\n    function revealInner() private {\\n        if (pendingPlay.batter == address(0x0)) {\\n            return;\\n        }\\n        uint hash = uint(blockhash(pendingPlay.blockNumber + 1));\\n        if (hash == 0) {\\n            // You can only access the hashes of the most recent 256 blocks, all other values will be zero.\\n            // If zero is returned, ignore the pendingPlay.\\n            return;\\n        }\\n\\n        uint random = uint(keccak256(abi.encodePacked(hash, pendingPlay.batter, pendingPlay.contractAddress, pendingPlay.tokenId)));\\n        uint result = random % 5;\\n        if (result == 0) {\\n            onSingle();\\n        } else if (result == 1) {\\n            onDouble();\\n        } else if (result == 2) {\\n            onTriple();\\n        } else if (result == 3) {\\n            onHomerun();\\n        } else if (result == 4) {\\n            onOut();\\n        } else {\\n            revert(\\\"unknown batter result\\\");\\n        }\\n\\n        uint score = getBattingScore(); // score added by this play\\n        if (score > 0) {\\n            claimableCounts[pendingPlay.batter] += score;\\n            totalScore += score;\\n        }\\n        emit PlayResult(pendingPlay.batter, getResultStr(result), score, bases, outs, totalScore);\\n        pendingPlay = PendingPlay(address(0x0), 0, address(0x0), 0);\\n    }\\n\\n    function getResultStr(uint result) private pure returns (string memory) {\\n        if (result == 0) {\\n            return \\\"SINGLE\\\";\\n        } else if (result == 1) {\\n            return \\\"DOUBLE\\\";\\n        } else if (result == 2) {\\n            return \\\"TRIPLE\\\";\\n        } else if (result == 3) {\\n            return \\\"HOMERUN\\\";\\n        } else if (result == 4) {\\n            return \\\"OUT\\\";\\n        } else {\\n            revert(\\\"unknown batter result\\\");\\n        }\\n    }\\n\\n    function onSingle() private {\\n        bases <<= 1;    // move runners\\n        bases += 0x01;  // add batter\\n    }\\n\\n    function onDouble() private {\\n        bases <<= 2;\\n        bases += 0x02;\\n    }\\n\\n    function onTriple() private {\\n        bases <<= 3;\\n        bases += 0x04;\\n    }\\n\\n    function onHomerun() private {\\n        bases <<= 4;\\n        bases += 0x08;\\n    }\\n\\n    function onOut() private {\\n        outs += 1;\\n        if (outs >= 3) {\\n            bases = 0;  // clear all runners\\n            outs = 0;   // reset outs\\n        }\\n    }\\n\\n    // calculate\\n    function getBattingScore() private returns (uint) {\\n        uint8 current = bases;\\n        uint8 homeInBit = current >> 3;\\n        uint8 score = 0;\\n        \\n        //  TODO: optimize\\n        uint8 i = 1;\\n        for (i = 1; i <= 8; i *= 2) {\\n            uint8 b = 8 / i;  // b is [8,4,2,1]\\n            uint8 bitScore = homeInBit / b;\\n            if (bitScore > 0) {\\n                score += bitScore;\\n                homeInBit = homeInBit - b;\\n            }\\n        }\\n\\n        // clear homein-ed runners\\n        bases = bases & 7; // bases = bases & 0b0000111\\n        return score;\\n    }\\n\\n    // --- AWARD NFT ---\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://ipfs.fleek.co/ipfs/bafybeih6prpmffzc527mqhzm2gp45ejvjf5jnbduupf34bo6ve2xogt5qi?\\\";\\n    }\\n\\n    function claimNFT(address to, uint8 maxCount) public {\\n        require(claimableCounts[to] > 0, \\\"No claimable NFTs.\\\");\\n        uint count = claimableCounts[to];\\n        for (uint8 i = 0; i < count && i < maxCount; i++) {\\n            mint(to);\\n        }\\n        claimableCounts[to] -= maxCount;\\n    }\\n\\n    function mintByOwner(address to) public onlyOwner {\\n        mint(to);\\n    }\\n\\n    function mint(address to) private {\\n        tokenIdCounter.increment();\\n        uint256 tokenId = tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xb42863eafea292abf2ab0158935ce7b76d3f43dad4f8b0f95ef41027f9983da8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f41776172644e46540000000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4157415244000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620001ee565b508060019080519060200190620000af929190620001ee565b5050506001600781905550620000da620000ce6200012060201b60201c565b6200012860201b60201c565b6000600a60006101000a81548160ff021916908360ff1602179055506000600a60016101000a81548160ff021916908360ff1602179055506000600b8190555062000303565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001fc906200029e565b90600052602060002090601f0160209004810192826200022057600085556200026c565b82601f106200023b57805160ff19168380011785556200026c565b828001600101855582156200026c579182015b828111156200026b5782518255916020019190600101906200024e565b5b5090506200027b91906200027f565b5090565b5b808211156200029a57600081600090555060010162000280565b5090565b60006002820490506001821680620002b757607f821691505b60208210811415620002ce57620002cd620002d4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61463c80620003136000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638a2b2d21116100de578063b533731d11610097578063c87b56dd11610071578063c87b56dd1461046f578063d11ac36e1461049f578063e985e9c5146104bd578063f2fde38b146104ed5761018e565b8063b533731d14610419578063b88d4fde14610435578063c006719f146104515761018e565b80638a2b2d21146103555780638da5cb5b1461038557806390e2d945146103a357806395d89b41146103c1578063a22cb465146103df578063a475b5dd146103fb5761018e565b8063296e33dc1161014b5780636352211e116101255780636352211e146102bb57806370a08231146102eb578063715018a61461031b5780637999b31f146103255761018e565b8063296e33dc1461026557806342842e0e1461028357806342966c681461029f5761018e565b806301ffc9a71461019357806306fdde03146101c3578063081812fc146101e1578063095ea7b31461021157806323b872dd1461022d5780632427fc0514610249575b600080fd5b6101ad60048036038101906101a891906130f3565b610509565b6040516101ba9190613731565b60405180910390f35b6101cb6105eb565b6040516101d8919061374c565b60405180910390f35b6101fb60048036038101906101f69190613145565b61067d565b6040516102089190613662565b60405180910390f35b61022b6004803603810190610226919061307b565b610702565b005b61024760048036038101906102429190612f75565b61081a565b005b610263600480360381019061025e91906130b7565b61087a565b005b61026d6109da565b60405161027a9190613a64565b60405180910390f35b61029d60048036038101906102989190612f75565b6109ed565b005b6102b960048036038101906102b49190613145565b610a0d565b005b6102d560048036038101906102d09190613145565b610a69565b6040516102e29190613662565b60405180910390f35b61030560048036038101906103009190612ee7565b610b1b565b6040516103129190613a49565b60405180910390f35b610323610bd3565b005b61033f600480360381019061033a919061307b565b610c5b565b60405161034c9190613a49565b60405180910390f35b61036f600480360381019061036a9190612ee7565b610eb6565b60405161037c9190613a49565b60405180910390f35b61038d610ece565b60405161039a9190613662565b60405180910390f35b6103ab610ef8565b6040516103b89190613a2e565b60405180910390f35b6103c9610fd2565b6040516103d6919061374c565b60405180910390f35b6103f960048036038101906103f4919061303f565b611064565b005b61040361107a565b6040516104109190613a49565b60405180910390f35b610433600480360381019061042e9190612ee7565b6110e2565b005b61044f600480360381019061044a9190612fc4565b61116a565b005b6104596111cc565b6040516104669190613a49565b60405180910390f35b61048960048036038101906104849190613145565b6111d2565b604051610496919061374c565b60405180910390f35b6104a76111e4565b6040516104b49190613a64565b60405180910390f35b6104d760048036038101906104d29190612f39565b6111f7565b6040516104e49190613731565b60405180910390f35b61050760048036038101906105029190612ee7565b61128b565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105e457506105e382611383565b5b9050919050565b6060600080546105fa90613d6d565b80601f016020809104026020016040519081016040528092919081815260200182805461062690613d6d565b80156106735780601f1061064857610100808354040283529160200191610673565b820191906000526020600020905b81548152906001019060200180831161065657829003601f168201915b5050505050905090565b6000610688826113ed565b6106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be9061392e565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070d82610a69565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561077e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107759061398e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661079d611459565b73ffffffffffffffffffffffffffffffffffffffff1614806107cc57506107cb816107c6611459565b6111f7565b5b61080b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108029061388e565b60405180910390fd5b6108158383611461565b505050565b61082b610825611459565b8261151a565b61086a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610861906139ce565b60405180910390fd5b6108758383836115f8565b505050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f3906139ae565b60405180910390fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060005b818160ff1610801561095a57508260ff168160ff16105b1561097b576109688461185f565b808061097390613e19565b915050610943565b508160ff16600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109ce9190613c42565b92505081905550505050565b600a60009054906101000a900460ff1681565b610a088383836040518060200160405280600081525061116a565b505050565b610a1e610a18611459565b8261151a565b610a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5490613a0e565b60405180910390fd5b610a6681611885565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b09906138ce565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b83906138ae565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bdb611459565b73ffffffffffffffffffffffffffffffffffffffff16610bf9610ece565b73ffffffffffffffffffffffffffffffffffffffff1614610c4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c469061394e565b60405180910390fd5b610c596000611891565b565b600060026007541415610ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9a906139ee565b60405180910390fd5b600260078190555060003390508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610d009190613a49565b60206040518083038186803b158015610d1857600080fd5b505afa158015610d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d509190612f10565b73ffffffffffffffffffffffffffffffffffffffff1614610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d9061380e565b60405180910390fd5b610dae611957565b60405180608001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020014381526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815250600d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155905050600b54915050600160078190555092915050565b600c6020528060005260406000206000915090505481565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f00612d3b565b600d6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905090565b606060018054610fe190613d6d565b80601f016020809104026020016040519081016040528092919081815260200182805461100d90613d6d565b801561105a5780601f1061102f5761010080835404028352916020019161105a565b820191906000526020600020905b81548152906001019060200180831161103d57829003601f168201915b5050505050905090565b61107661106f611459565b8383611d57565b5050565b6000600260075414156110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b9906139ee565b60405180910390fd5b60026007819055506110d2611957565b600b549050600160078190555090565b6110ea611459565b73ffffffffffffffffffffffffffffffffffffffff16611108610ece565b73ffffffffffffffffffffffffffffffffffffffff161461115e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111559061394e565b60405180910390fd5b6111678161185f565b50565b61117b611175611459565b8361151a565b6111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b1906139ce565b60405180910390fd5b6111c684848484611ec4565b50505050565b600b5481565b60606111dd82611f20565b9050919050565b600a60019054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611293611459565b73ffffffffffffffffffffffffffffffffffffffff166112b1610ece565b73ffffffffffffffffffffffffffffffffffffffff1614611307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fe9061394e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136e906137ae565b60405180910390fd5b61138081611891565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166114d483610a69565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611525826113ed565b611564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155b9061386e565b60405180910390fd5b600061156f83610a69565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806115b157506115b081856111f7565b5b806115ef57508373ffffffffffffffffffffffffffffffffffffffff166115d78461067d565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661161882610a69565b73ffffffffffffffffffffffffffffffffffffffff161461166e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611665906137ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d59061382e565b60405180910390fd5b6116e9838383612072565b6116f4600082611461565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117449190613c42565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461179b9190613b18565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461185a838383612077565b505050565b611869600961207c565b60006118756009612092565b905061188182826120a0565b5050565b61188e816120be565b50565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156119b657611d55565b60006001600d600101546119ca9190613b18565b4060001c905060008114156119df5750611d55565b600081600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60030154604051602001611a479493929190613614565b6040516020818303038152906040528051906020012060001c90506000600582611a719190613e71565b90506000811415611a8957611a84612111565b611b20565b6001811415611a9f57611a9a61217c565b611b1f565b6002811415611ab557611ab06121e7565b611b1e565b6003811415611acb57611ac6612252565b611b1d565b6004811415611ae157611adc6122bd565b611b1c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b139061376e565b60405180910390fd5b5b5b5b5b6000611b2a612349565b90506000811115611bca5780600c6000600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ba99190613b18565b9250508190555080600b6000828254611bc29190613b18565b925050819055505b7f881d97d6b548579bb1959036270aff4f8c7481349c8fd466efa894f6f2d2c5c4600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611c1a8461241b565b83600a60009054906101000a900460ff16600a60019054906101000a900460ff16600b54604051611c50969594939291906136c9565b60405180910390a16040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815250600d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155905050505050505b565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbd9061384e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611eb79190613731565b60405180910390a3505050565b611ecf8484846115f8565b611edb848484846125bb565b611f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f119061378e565b60405180910390fd5b50505050565b6060611f2b826113ed565b611f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f619061390e565b60405180910390fd5b6000600660008481526020019081526020016000208054611f8a90613d6d565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb690613d6d565b80156120035780601f10611fd857610100808354040283529160200191612003565b820191906000526020600020905b815481529060010190602001808311611fe657829003601f168201915b505050505090506000612014612752565b905060008151141561202a57819250505061206d565b60008251111561205f5780826040516020016120479291906135f0565b6040516020818303038152906040529250505061206d565b61206884612772565b925050505b919050565b505050565b505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6120ba828260405180602001604052806000815250612819565b5050565b6120c781612874565b60006006600083815260200190815260200160002080546120e790613d6d565b90501461210e5760066000828152602001908152602001600020600061210d9190612d8f565b5b50565b6001600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506001600a60008282829054906101000a900460ff166121629190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6002600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506002600a60008282829054906101000a900460ff166121cd9190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6003600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506004600a60008282829054906101000a900460ff166122389190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6004600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506008600a60008282829054906101000a900460ff166122a39190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6001600a60018282829054906101000a900460ff166122dc9190613b6e565b92506101000a81548160ff021916908360ff1602179055506003600a60019054906101000a900460ff1660ff1610612347576000600a60006101000a81548160ff021916908360ff1602179055506000600a60016101000a81548160ff021916908360ff1602179055505b565b600080600a60009054906101000a900460ff169050600060038260ff16901c905060008060019050600190505b60088160ff16116123e15760008160086123909190613bd6565b9050600081856123a09190613bd6565b905060008160ff1611156123cb5780846123ba9190613b6e565b935081856123c89190613c76565b94505b50506002816123da9190613c07565b9050612376565b6007600a60009054906101000a900460ff1616600a60006101000a81548160ff021916908360ff1602179055508160ff1694505050505090565b60606000821415612463576040518060400160405280600681526020017f53494e474c45000000000000000000000000000000000000000000000000000081525090506125b6565b60018214156124a9576040518060400160405280600681526020017f444f55424c45000000000000000000000000000000000000000000000000000081525090506125b6565b60028214156124ef576040518060400160405280600681526020017f545249504c45000000000000000000000000000000000000000000000000000081525090506125b6565b6003821415612535576040518060400160405280600781526020017f484f4d4552554e0000000000000000000000000000000000000000000000000081525090506125b6565b600482141561257b576040518060400160405280600381526020017f4f5554000000000000000000000000000000000000000000000000000000000081525090506125b6565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ad9061376e565b60405180910390fd5b919050565b60006125dc8473ffffffffffffffffffffffffffffffffffffffff16612991565b15612745578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612605611459565b8786866040518563ffffffff1660e01b8152600401612627949392919061367d565b602060405180830381600087803b15801561264157600080fd5b505af192505050801561267257506040513d601f19601f8201168201806040525081019061266f919061311c565b60015b6126f5573d80600081146126a2576040519150601f19603f3d011682016040523d82523d6000602084013e6126a7565b606091505b506000815114156126ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e49061378e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061274a565b600190505b949350505050565b60606040518060800160405280605781526020016145b060579139905090565b606061277d826113ed565b6127bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b39061396e565b60405180910390fd5b60006127c6612752565b905060008151116127e65760405180602001604052806000815250612811565b806127f0846129b4565b6040516020016128019291906135f0565b6040516020818303038152906040525b915050919050565b6128238383612b61565b61283060008484846125bb565b61286f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128669061378e565b60405180910390fd5b505050565b600061287f82610a69565b905061288d81600084612072565b612898600083611461565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128e89190613c42565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461298d81600084612077565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060008214156129fc576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612b5c565b600082905060005b60008214612a2e578080612a1790613dd0565b915050600a82612a279190613ba5565b9150612a04565b60008167ffffffffffffffff811115612a70577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612aa25781602001600182028036833780820191505090505b5090505b60008514612b5557600182612abb9190613c42565b9150600a85612aca9190613e71565b6030612ad69190613b18565b60f81b818381518110612b12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612b4e9190613ba5565b9450612aa6565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc8906138ee565b60405180910390fd5b612bda816113ed565b15612c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c11906137ee565b60405180910390fd5b612c2660008383612072565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c769190613b18565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d3760008383612077565b5050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b508054612d9b90613d6d565b6000825580601f10612dad5750612dcc565b601f016020900490600052602060002090810190612dcb9190612dcf565b5b50565b5b80821115612de8576000816000905550600101612dd0565b5090565b6000612dff612dfa84613aa4565b613a7f565b905082815260208101848484011115612e1757600080fd5b612e22848285613d2b565b509392505050565b600081359050612e398161453c565b92915050565b600081519050612e4e8161453c565b92915050565b600081359050612e6381614553565b92915050565b600081359050612e788161456a565b92915050565b600081519050612e8d8161456a565b92915050565b600082601f830112612ea457600080fd5b8135612eb4848260208601612dec565b91505092915050565b600081359050612ecc81614581565b92915050565b600081359050612ee181614598565b92915050565b600060208284031215612ef957600080fd5b6000612f0784828501612e2a565b91505092915050565b600060208284031215612f2257600080fd5b6000612f3084828501612e3f565b91505092915050565b60008060408385031215612f4c57600080fd5b6000612f5a85828601612e2a565b9250506020612f6b85828601612e2a565b9150509250929050565b600080600060608486031215612f8a57600080fd5b6000612f9886828701612e2a565b9350506020612fa986828701612e2a565b9250506040612fba86828701612ebd565b9150509250925092565b60008060008060808587031215612fda57600080fd5b6000612fe887828801612e2a565b9450506020612ff987828801612e2a565b935050604061300a87828801612ebd565b925050606085013567ffffffffffffffff81111561302757600080fd5b61303387828801612e93565b91505092959194509250565b6000806040838503121561305257600080fd5b600061306085828601612e2a565b925050602061307185828601612e54565b9150509250929050565b6000806040838503121561308e57600080fd5b600061309c85828601612e2a565b92505060206130ad85828601612ebd565b9150509250929050565b600080604083850312156130ca57600080fd5b60006130d885828601612e2a565b92505060206130e985828601612ed2565b9150509250929050565b60006020828403121561310557600080fd5b600061311384828501612e69565b91505092915050565b60006020828403121561312e57600080fd5b600061313c84828501612e7e565b91505092915050565b60006020828403121561315757600080fd5b600061316584828501612ebd565b91505092915050565b61317781613caa565b82525050565b61318681613caa565b82525050565b61319d61319882613caa565b613e43565b82525050565b6131ac81613cbc565b82525050565b60006131bd82613ad5565b6131c78185613aeb565b93506131d7818560208601613d3a565b6131e081613f5e565b840191505092915050565b60006131f682613ae0565b6132008185613afc565b9350613210818560208601613d3a565b61321981613f5e565b840191505092915050565b600061322f82613ae0565b6132398185613b0d565b9350613249818560208601613d3a565b80840191505092915050565b6000613262601583613afc565b915061326d82613f7c565b602082019050919050565b6000613285603283613afc565b915061329082613fa5565b604082019050919050565b60006132a8602683613afc565b91506132b382613ff4565b604082019050919050565b60006132cb602583613afc565b91506132d682614043565b604082019050919050565b60006132ee601c83613afc565b91506132f982614092565b602082019050919050565b6000613311602c83613afc565b915061331c826140bb565b604082019050919050565b6000613334602483613afc565b915061333f8261410a565b604082019050919050565b6000613357601983613afc565b915061336282614159565b602082019050919050565b600061337a602c83613afc565b915061338582614182565b604082019050919050565b600061339d603883613afc565b91506133a8826141d1565b604082019050919050565b60006133c0602a83613afc565b91506133cb82614220565b604082019050919050565b60006133e3602983613afc565b91506133ee8261426f565b604082019050919050565b6000613406602083613afc565b9150613411826142be565b602082019050919050565b6000613429603183613afc565b9150613434826142e7565b604082019050919050565b600061344c602c83613afc565b915061345782614336565b604082019050919050565b600061346f602083613afc565b915061347a82614385565b602082019050919050565b6000613492602f83613afc565b915061349d826143ae565b604082019050919050565b60006134b5602183613afc565b91506134c0826143fd565b604082019050919050565b60006134d8601283613afc565b91506134e38261444c565b602082019050919050565b60006134fb603183613afc565b915061350682614475565b604082019050919050565b600061351e601f83613afc565b9150613529826144c4565b602082019050919050565b6000613541603083613afc565b915061354c826144ed565b604082019050919050565b60808201600082015161356d600085018261316e565b50602082015161358060208501826135ac565b506040820151613593604085018261316e565b5060608201516135a660608501826135ac565b50505050565b6135b581613d14565b82525050565b6135c481613d14565b82525050565b6135db6135d682613d14565b613e67565b82525050565b6135ea81613d1e565b82525050565b60006135fc8285613224565b91506136088284613224565b91508190509392505050565b600061362082876135ca565b602082019150613630828661318c565b601482019150613640828561318c565b60148201915061365082846135ca565b60208201915081905095945050505050565b6000602082019050613677600083018461317d565b92915050565b6000608082019050613692600083018761317d565b61369f602083018661317d565b6136ac60408301856135bb565b81810360608301526136be81846131b2565b905095945050505050565b600060c0820190506136de600083018961317d565b81810360208301526136f081886131eb565b90506136ff60408301876135bb565b61370c60608301866135e1565b61371960808301856135e1565b61372660a08301846135bb565b979650505050505050565b600060208201905061374660008301846131a3565b92915050565b6000602082019050818103600083015261376681846131eb565b905092915050565b6000602082019050818103600083015261378781613255565b9050919050565b600060208201905081810360008301526137a781613278565b9050919050565b600060208201905081810360008301526137c78161329b565b9050919050565b600060208201905081810360008301526137e7816132be565b9050919050565b60006020820190508181036000830152613807816132e1565b9050919050565b6000602082019050818103600083015261382781613304565b9050919050565b6000602082019050818103600083015261384781613327565b9050919050565b600060208201905081810360008301526138678161334a565b9050919050565b600060208201905081810360008301526138878161336d565b9050919050565b600060208201905081810360008301526138a781613390565b9050919050565b600060208201905081810360008301526138c7816133b3565b9050919050565b600060208201905081810360008301526138e7816133d6565b9050919050565b60006020820190508181036000830152613907816133f9565b9050919050565b600060208201905081810360008301526139278161341c565b9050919050565b600060208201905081810360008301526139478161343f565b9050919050565b6000602082019050818103600083015261396781613462565b9050919050565b6000602082019050818103600083015261398781613485565b9050919050565b600060208201905081810360008301526139a7816134a8565b9050919050565b600060208201905081810360008301526139c7816134cb565b9050919050565b600060208201905081810360008301526139e7816134ee565b9050919050565b60006020820190508181036000830152613a0781613511565b9050919050565b60006020820190508181036000830152613a2781613534565b9050919050565b6000608082019050613a436000830184613557565b92915050565b6000602082019050613a5e60008301846135bb565b92915050565b6000602082019050613a7960008301846135e1565b92915050565b6000613a89613a9a565b9050613a958282613d9f565b919050565b6000604051905090565b600067ffffffffffffffff821115613abf57613abe613f2f565b5b613ac882613f5e565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613b2382613d14565b9150613b2e83613d14565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b6357613b62613ea2565b5b828201905092915050565b6000613b7982613d1e565b9150613b8483613d1e565b92508260ff03821115613b9a57613b99613ea2565b5b828201905092915050565b6000613bb082613d14565b9150613bbb83613d14565b925082613bcb57613bca613ed1565b5b828204905092915050565b6000613be182613d1e565b9150613bec83613d1e565b925082613bfc57613bfb613ed1565b5b828204905092915050565b6000613c1282613d1e565b9150613c1d83613d1e565b92508160ff0483118215151615613c3757613c36613ea2565b5b828202905092915050565b6000613c4d82613d14565b9150613c5883613d14565b925082821015613c6b57613c6a613ea2565b5b828203905092915050565b6000613c8182613d1e565b9150613c8c83613d1e565b925082821015613c9f57613c9e613ea2565b5b828203905092915050565b6000613cb582613cf4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613d58578082015181840152602081019050613d3d565b83811115613d67576000848401525b50505050565b60006002820490506001821680613d8557607f821691505b60208210811415613d9957613d98613f00565b5b50919050565b613da882613f5e565b810181811067ffffffffffffffff82111715613dc757613dc6613f2f565b5b80604052505050565b6000613ddb82613d14565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e0e57613e0d613ea2565b5b600182019050919050565b6000613e2482613d1e565b915060ff821415613e3857613e37613ea2565b5b600182019050919050565b6000613e4e82613e55565b9050919050565b6000613e6082613f6f565b9050919050565b6000819050919050565b6000613e7c82613d14565b9150613e8783613d14565b925082613e9757613e96613ed1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f756e6b6e6f776e2062617474657220726573756c740000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4f6e6c7920746865206f776e6572206f6620737065636966696564204e46542060008201527f63616e20747269676765722e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20636c61696d61626c65204e4654732e0000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b61454581613caa565b811461455057600080fd5b50565b61455c81613cbc565b811461456757600080fd5b50565b61457381613cc8565b811461457e57600080fd5b50565b61458a81613d14565b811461459557600080fd5b50565b6145a181613d1e565b81146145ac57600080fd5b5056fe68747470733a2f2f697066732e666c65656b2e636f2f697066732f6261667962656968367072706d66667a633532376d71687a6d3267703435656a766a66356a6e6264757570663334626f36766532786f67743571693fa2646970667358221220d0b196244dd148c3690bc874908b48aa62d9d1aecb5196eeae9a93e1350b142564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638a2b2d21116100de578063b533731d11610097578063c87b56dd11610071578063c87b56dd1461046f578063d11ac36e1461049f578063e985e9c5146104bd578063f2fde38b146104ed5761018e565b8063b533731d14610419578063b88d4fde14610435578063c006719f146104515761018e565b80638a2b2d21146103555780638da5cb5b1461038557806390e2d945146103a357806395d89b41146103c1578063a22cb465146103df578063a475b5dd146103fb5761018e565b8063296e33dc1161014b5780636352211e116101255780636352211e146102bb57806370a08231146102eb578063715018a61461031b5780637999b31f146103255761018e565b8063296e33dc1461026557806342842e0e1461028357806342966c681461029f5761018e565b806301ffc9a71461019357806306fdde03146101c3578063081812fc146101e1578063095ea7b31461021157806323b872dd1461022d5780632427fc0514610249575b600080fd5b6101ad60048036038101906101a891906130f3565b610509565b6040516101ba9190613731565b60405180910390f35b6101cb6105eb565b6040516101d8919061374c565b60405180910390f35b6101fb60048036038101906101f69190613145565b61067d565b6040516102089190613662565b60405180910390f35b61022b6004803603810190610226919061307b565b610702565b005b61024760048036038101906102429190612f75565b61081a565b005b610263600480360381019061025e91906130b7565b61087a565b005b61026d6109da565b60405161027a9190613a64565b60405180910390f35b61029d60048036038101906102989190612f75565b6109ed565b005b6102b960048036038101906102b49190613145565b610a0d565b005b6102d560048036038101906102d09190613145565b610a69565b6040516102e29190613662565b60405180910390f35b61030560048036038101906103009190612ee7565b610b1b565b6040516103129190613a49565b60405180910390f35b610323610bd3565b005b61033f600480360381019061033a919061307b565b610c5b565b60405161034c9190613a49565b60405180910390f35b61036f600480360381019061036a9190612ee7565b610eb6565b60405161037c9190613a49565b60405180910390f35b61038d610ece565b60405161039a9190613662565b60405180910390f35b6103ab610ef8565b6040516103b89190613a2e565b60405180910390f35b6103c9610fd2565b6040516103d6919061374c565b60405180910390f35b6103f960048036038101906103f4919061303f565b611064565b005b61040361107a565b6040516104109190613a49565b60405180910390f35b610433600480360381019061042e9190612ee7565b6110e2565b005b61044f600480360381019061044a9190612fc4565b61116a565b005b6104596111cc565b6040516104669190613a49565b60405180910390f35b61048960048036038101906104849190613145565b6111d2565b604051610496919061374c565b60405180910390f35b6104a76111e4565b6040516104b49190613a64565b60405180910390f35b6104d760048036038101906104d29190612f39565b6111f7565b6040516104e49190613731565b60405180910390f35b61050760048036038101906105029190612ee7565b61128b565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105e457506105e382611383565b5b9050919050565b6060600080546105fa90613d6d565b80601f016020809104026020016040519081016040528092919081815260200182805461062690613d6d565b80156106735780601f1061064857610100808354040283529160200191610673565b820191906000526020600020905b81548152906001019060200180831161065657829003601f168201915b5050505050905090565b6000610688826113ed565b6106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be9061392e565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070d82610a69565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561077e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107759061398e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661079d611459565b73ffffffffffffffffffffffffffffffffffffffff1614806107cc57506107cb816107c6611459565b6111f7565b5b61080b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108029061388e565b60405180910390fd5b6108158383611461565b505050565b61082b610825611459565b8261151a565b61086a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610861906139ce565b60405180910390fd5b6108758383836115f8565b505050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f3906139ae565b60405180910390fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060005b818160ff1610801561095a57508260ff168160ff16105b1561097b576109688461185f565b808061097390613e19565b915050610943565b508160ff16600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109ce9190613c42565b92505081905550505050565b600a60009054906101000a900460ff1681565b610a088383836040518060200160405280600081525061116a565b505050565b610a1e610a18611459565b8261151a565b610a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5490613a0e565b60405180910390fd5b610a6681611885565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b09906138ce565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b83906138ae565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bdb611459565b73ffffffffffffffffffffffffffffffffffffffff16610bf9610ece565b73ffffffffffffffffffffffffffffffffffffffff1614610c4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c469061394e565b60405180910390fd5b610c596000611891565b565b600060026007541415610ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9a906139ee565b60405180910390fd5b600260078190555060003390508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610d009190613a49565b60206040518083038186803b158015610d1857600080fd5b505afa158015610d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d509190612f10565b73ffffffffffffffffffffffffffffffffffffffff1614610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d9061380e565b60405180910390fd5b610dae611957565b60405180608001604052808273ffffffffffffffffffffffffffffffffffffffff1681526020014381526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815250600d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155905050600b54915050600160078190555092915050565b600c6020528060005260406000206000915090505481565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f00612d3b565b600d6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905090565b606060018054610fe190613d6d565b80601f016020809104026020016040519081016040528092919081815260200182805461100d90613d6d565b801561105a5780601f1061102f5761010080835404028352916020019161105a565b820191906000526020600020905b81548152906001019060200180831161103d57829003601f168201915b5050505050905090565b61107661106f611459565b8383611d57565b5050565b6000600260075414156110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b9906139ee565b60405180910390fd5b60026007819055506110d2611957565b600b549050600160078190555090565b6110ea611459565b73ffffffffffffffffffffffffffffffffffffffff16611108610ece565b73ffffffffffffffffffffffffffffffffffffffff161461115e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111559061394e565b60405180910390fd5b6111678161185f565b50565b61117b611175611459565b8361151a565b6111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b1906139ce565b60405180910390fd5b6111c684848484611ec4565b50505050565b600b5481565b60606111dd82611f20565b9050919050565b600a60019054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611293611459565b73ffffffffffffffffffffffffffffffffffffffff166112b1610ece565b73ffffffffffffffffffffffffffffffffffffffff1614611307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fe9061394e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136e906137ae565b60405180910390fd5b61138081611891565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166114d483610a69565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611525826113ed565b611564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155b9061386e565b60405180910390fd5b600061156f83610a69565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806115b157506115b081856111f7565b5b806115ef57508373ffffffffffffffffffffffffffffffffffffffff166115d78461067d565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661161882610a69565b73ffffffffffffffffffffffffffffffffffffffff161461166e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611665906137ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d59061382e565b60405180910390fd5b6116e9838383612072565b6116f4600082611461565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117449190613c42565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461179b9190613b18565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461185a838383612077565b505050565b611869600961207c565b60006118756009612092565b905061188182826120a0565b5050565b61188e816120be565b50565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156119b657611d55565b60006001600d600101546119ca9190613b18565b4060001c905060008114156119df5750611d55565b600081600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60030154604051602001611a479493929190613614565b6040516020818303038152906040528051906020012060001c90506000600582611a719190613e71565b90506000811415611a8957611a84612111565b611b20565b6001811415611a9f57611a9a61217c565b611b1f565b6002811415611ab557611ab06121e7565b611b1e565b6003811415611acb57611ac6612252565b611b1d565b6004811415611ae157611adc6122bd565b611b1c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b139061376e565b60405180910390fd5b5b5b5b5b6000611b2a612349565b90506000811115611bca5780600c6000600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ba99190613b18565b9250508190555080600b6000828254611bc29190613b18565b925050819055505b7f881d97d6b548579bb1959036270aff4f8c7481349c8fd466efa894f6f2d2c5c4600d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611c1a8461241b565b83600a60009054906101000a900460ff16600a60019054906101000a900460ff16600b54604051611c50969594939291906136c9565b60405180910390a16040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815250600d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155905050505050505b565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbd9061384e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611eb79190613731565b60405180910390a3505050565b611ecf8484846115f8565b611edb848484846125bb565b611f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f119061378e565b60405180910390fd5b50505050565b6060611f2b826113ed565b611f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f619061390e565b60405180910390fd5b6000600660008481526020019081526020016000208054611f8a90613d6d565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb690613d6d565b80156120035780601f10611fd857610100808354040283529160200191612003565b820191906000526020600020905b815481529060010190602001808311611fe657829003601f168201915b505050505090506000612014612752565b905060008151141561202a57819250505061206d565b60008251111561205f5780826040516020016120479291906135f0565b6040516020818303038152906040529250505061206d565b61206884612772565b925050505b919050565b505050565b505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6120ba828260405180602001604052806000815250612819565b5050565b6120c781612874565b60006006600083815260200190815260200160002080546120e790613d6d565b90501461210e5760066000828152602001908152602001600020600061210d9190612d8f565b5b50565b6001600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506001600a60008282829054906101000a900460ff166121629190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6002600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506002600a60008282829054906101000a900460ff166121cd9190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6003600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506004600a60008282829054906101000a900460ff166122389190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6004600a60008282829054906101000a900460ff1660ff16901b92506101000a81548160ff021916908360ff1602179055506008600a60008282829054906101000a900460ff166122a39190613b6e565b92506101000a81548160ff021916908360ff160217905550565b6001600a60018282829054906101000a900460ff166122dc9190613b6e565b92506101000a81548160ff021916908360ff1602179055506003600a60019054906101000a900460ff1660ff1610612347576000600a60006101000a81548160ff021916908360ff1602179055506000600a60016101000a81548160ff021916908360ff1602179055505b565b600080600a60009054906101000a900460ff169050600060038260ff16901c905060008060019050600190505b60088160ff16116123e15760008160086123909190613bd6565b9050600081856123a09190613bd6565b905060008160ff1611156123cb5780846123ba9190613b6e565b935081856123c89190613c76565b94505b50506002816123da9190613c07565b9050612376565b6007600a60009054906101000a900460ff1616600a60006101000a81548160ff021916908360ff1602179055508160ff1694505050505090565b60606000821415612463576040518060400160405280600681526020017f53494e474c45000000000000000000000000000000000000000000000000000081525090506125b6565b60018214156124a9576040518060400160405280600681526020017f444f55424c45000000000000000000000000000000000000000000000000000081525090506125b6565b60028214156124ef576040518060400160405280600681526020017f545249504c45000000000000000000000000000000000000000000000000000081525090506125b6565b6003821415612535576040518060400160405280600781526020017f484f4d4552554e0000000000000000000000000000000000000000000000000081525090506125b6565b600482141561257b576040518060400160405280600381526020017f4f5554000000000000000000000000000000000000000000000000000000000081525090506125b6565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ad9061376e565b60405180910390fd5b919050565b60006125dc8473ffffffffffffffffffffffffffffffffffffffff16612991565b15612745578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612605611459565b8786866040518563ffffffff1660e01b8152600401612627949392919061367d565b602060405180830381600087803b15801561264157600080fd5b505af192505050801561267257506040513d601f19601f8201168201806040525081019061266f919061311c565b60015b6126f5573d80600081146126a2576040519150601f19603f3d011682016040523d82523d6000602084013e6126a7565b606091505b506000815114156126ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e49061378e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061274a565b600190505b949350505050565b60606040518060800160405280605781526020016145b060579139905090565b606061277d826113ed565b6127bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b39061396e565b60405180910390fd5b60006127c6612752565b905060008151116127e65760405180602001604052806000815250612811565b806127f0846129b4565b6040516020016128019291906135f0565b6040516020818303038152906040525b915050919050565b6128238383612b61565b61283060008484846125bb565b61286f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128669061378e565b60405180910390fd5b505050565b600061287f82610a69565b905061288d81600084612072565b612898600083611461565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128e89190613c42565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461298d81600084612077565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060008214156129fc576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612b5c565b600082905060005b60008214612a2e578080612a1790613dd0565b915050600a82612a279190613ba5565b9150612a04565b60008167ffffffffffffffff811115612a70577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612aa25781602001600182028036833780820191505090505b5090505b60008514612b5557600182612abb9190613c42565b9150600a85612aca9190613e71565b6030612ad69190613b18565b60f81b818381518110612b12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612b4e9190613ba5565b9450612aa6565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc8906138ee565b60405180910390fd5b612bda816113ed565b15612c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c11906137ee565b60405180910390fd5b612c2660008383612072565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c769190613b18565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d3760008383612077565b5050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b508054612d9b90613d6d565b6000825580601f10612dad5750612dcc565b601f016020900490600052602060002090810190612dcb9190612dcf565b5b50565b5b80821115612de8576000816000905550600101612dd0565b5090565b6000612dff612dfa84613aa4565b613a7f565b905082815260208101848484011115612e1757600080fd5b612e22848285613d2b565b509392505050565b600081359050612e398161453c565b92915050565b600081519050612e4e8161453c565b92915050565b600081359050612e6381614553565b92915050565b600081359050612e788161456a565b92915050565b600081519050612e8d8161456a565b92915050565b600082601f830112612ea457600080fd5b8135612eb4848260208601612dec565b91505092915050565b600081359050612ecc81614581565b92915050565b600081359050612ee181614598565b92915050565b600060208284031215612ef957600080fd5b6000612f0784828501612e2a565b91505092915050565b600060208284031215612f2257600080fd5b6000612f3084828501612e3f565b91505092915050565b60008060408385031215612f4c57600080fd5b6000612f5a85828601612e2a565b9250506020612f6b85828601612e2a565b9150509250929050565b600080600060608486031215612f8a57600080fd5b6000612f9886828701612e2a565b9350506020612fa986828701612e2a565b9250506040612fba86828701612ebd565b9150509250925092565b60008060008060808587031215612fda57600080fd5b6000612fe887828801612e2a565b9450506020612ff987828801612e2a565b935050604061300a87828801612ebd565b925050606085013567ffffffffffffffff81111561302757600080fd5b61303387828801612e93565b91505092959194509250565b6000806040838503121561305257600080fd5b600061306085828601612e2a565b925050602061307185828601612e54565b9150509250929050565b6000806040838503121561308e57600080fd5b600061309c85828601612e2a565b92505060206130ad85828601612ebd565b9150509250929050565b600080604083850312156130ca57600080fd5b60006130d885828601612e2a565b92505060206130e985828601612ed2565b9150509250929050565b60006020828403121561310557600080fd5b600061311384828501612e69565b91505092915050565b60006020828403121561312e57600080fd5b600061313c84828501612e7e565b91505092915050565b60006020828403121561315757600080fd5b600061316584828501612ebd565b91505092915050565b61317781613caa565b82525050565b61318681613caa565b82525050565b61319d61319882613caa565b613e43565b82525050565b6131ac81613cbc565b82525050565b60006131bd82613ad5565b6131c78185613aeb565b93506131d7818560208601613d3a565b6131e081613f5e565b840191505092915050565b60006131f682613ae0565b6132008185613afc565b9350613210818560208601613d3a565b61321981613f5e565b840191505092915050565b600061322f82613ae0565b6132398185613b0d565b9350613249818560208601613d3a565b80840191505092915050565b6000613262601583613afc565b915061326d82613f7c565b602082019050919050565b6000613285603283613afc565b915061329082613fa5565b604082019050919050565b60006132a8602683613afc565b91506132b382613ff4565b604082019050919050565b60006132cb602583613afc565b91506132d682614043565b604082019050919050565b60006132ee601c83613afc565b91506132f982614092565b602082019050919050565b6000613311602c83613afc565b915061331c826140bb565b604082019050919050565b6000613334602483613afc565b915061333f8261410a565b604082019050919050565b6000613357601983613afc565b915061336282614159565b602082019050919050565b600061337a602c83613afc565b915061338582614182565b604082019050919050565b600061339d603883613afc565b91506133a8826141d1565b604082019050919050565b60006133c0602a83613afc565b91506133cb82614220565b604082019050919050565b60006133e3602983613afc565b91506133ee8261426f565b604082019050919050565b6000613406602083613afc565b9150613411826142be565b602082019050919050565b6000613429603183613afc565b9150613434826142e7565b604082019050919050565b600061344c602c83613afc565b915061345782614336565b604082019050919050565b600061346f602083613afc565b915061347a82614385565b602082019050919050565b6000613492602f83613afc565b915061349d826143ae565b604082019050919050565b60006134b5602183613afc565b91506134c0826143fd565b604082019050919050565b60006134d8601283613afc565b91506134e38261444c565b602082019050919050565b60006134fb603183613afc565b915061350682614475565b604082019050919050565b600061351e601f83613afc565b9150613529826144c4565b602082019050919050565b6000613541603083613afc565b915061354c826144ed565b604082019050919050565b60808201600082015161356d600085018261316e565b50602082015161358060208501826135ac565b506040820151613593604085018261316e565b5060608201516135a660608501826135ac565b50505050565b6135b581613d14565b82525050565b6135c481613d14565b82525050565b6135db6135d682613d14565b613e67565b82525050565b6135ea81613d1e565b82525050565b60006135fc8285613224565b91506136088284613224565b91508190509392505050565b600061362082876135ca565b602082019150613630828661318c565b601482019150613640828561318c565b60148201915061365082846135ca565b60208201915081905095945050505050565b6000602082019050613677600083018461317d565b92915050565b6000608082019050613692600083018761317d565b61369f602083018661317d565b6136ac60408301856135bb565b81810360608301526136be81846131b2565b905095945050505050565b600060c0820190506136de600083018961317d565b81810360208301526136f081886131eb565b90506136ff60408301876135bb565b61370c60608301866135e1565b61371960808301856135e1565b61372660a08301846135bb565b979650505050505050565b600060208201905061374660008301846131a3565b92915050565b6000602082019050818103600083015261376681846131eb565b905092915050565b6000602082019050818103600083015261378781613255565b9050919050565b600060208201905081810360008301526137a781613278565b9050919050565b600060208201905081810360008301526137c78161329b565b9050919050565b600060208201905081810360008301526137e7816132be565b9050919050565b60006020820190508181036000830152613807816132e1565b9050919050565b6000602082019050818103600083015261382781613304565b9050919050565b6000602082019050818103600083015261384781613327565b9050919050565b600060208201905081810360008301526138678161334a565b9050919050565b600060208201905081810360008301526138878161336d565b9050919050565b600060208201905081810360008301526138a781613390565b9050919050565b600060208201905081810360008301526138c7816133b3565b9050919050565b600060208201905081810360008301526138e7816133d6565b9050919050565b60006020820190508181036000830152613907816133f9565b9050919050565b600060208201905081810360008301526139278161341c565b9050919050565b600060208201905081810360008301526139478161343f565b9050919050565b6000602082019050818103600083015261396781613462565b9050919050565b6000602082019050818103600083015261398781613485565b9050919050565b600060208201905081810360008301526139a7816134a8565b9050919050565b600060208201905081810360008301526139c7816134cb565b9050919050565b600060208201905081810360008301526139e7816134ee565b9050919050565b60006020820190508181036000830152613a0781613511565b9050919050565b60006020820190508181036000830152613a2781613534565b9050919050565b6000608082019050613a436000830184613557565b92915050565b6000602082019050613a5e60008301846135bb565b92915050565b6000602082019050613a7960008301846135e1565b92915050565b6000613a89613a9a565b9050613a958282613d9f565b919050565b6000604051905090565b600067ffffffffffffffff821115613abf57613abe613f2f565b5b613ac882613f5e565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613b2382613d14565b9150613b2e83613d14565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b6357613b62613ea2565b5b828201905092915050565b6000613b7982613d1e565b9150613b8483613d1e565b92508260ff03821115613b9a57613b99613ea2565b5b828201905092915050565b6000613bb082613d14565b9150613bbb83613d14565b925082613bcb57613bca613ed1565b5b828204905092915050565b6000613be182613d1e565b9150613bec83613d1e565b925082613bfc57613bfb613ed1565b5b828204905092915050565b6000613c1282613d1e565b9150613c1d83613d1e565b92508160ff0483118215151615613c3757613c36613ea2565b5b828202905092915050565b6000613c4d82613d14565b9150613c5883613d14565b925082821015613c6b57613c6a613ea2565b5b828203905092915050565b6000613c8182613d1e565b9150613c8c83613d1e565b925082821015613c9f57613c9e613ea2565b5b828203905092915050565b6000613cb582613cf4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613d58578082015181840152602081019050613d3d565b83811115613d67576000848401525b50505050565b60006002820490506001821680613d8557607f821691505b60208210811415613d9957613d98613f00565b5b50919050565b613da882613f5e565b810181811067ffffffffffffffff82111715613dc757613dc6613f2f565b5b80604052505050565b6000613ddb82613d14565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e0e57613e0d613ea2565b5b600182019050919050565b6000613e2482613d1e565b915060ff821415613e3857613e37613ea2565b5b600182019050919050565b6000613e4e82613e55565b9050919050565b6000613e6082613f6f565b9050919050565b6000819050919050565b6000613e7c82613d14565b9150613e8783613d14565b925082613e9757613e96613ed1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f756e6b6e6f776e2062617474657220726573756c740000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4f6e6c7920746865206f776e6572206f6620737065636966696564204e46542060008201527f63616e20747269676765722e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20636c61696d61626c65204e4654732e0000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b61454581613caa565b811461455057600080fd5b50565b61455c81613cbc565b811461456757600080fd5b50565b61457381613cc8565b811461457e57600080fd5b50565b61458a81613d14565b811461459557600080fd5b50565b6145a181613d1e565b81146145ac57600080fd5b5056fe68747470733a2f2f697066732e666c65656b2e636f2f697066732f6261667962656968367072706d66667a633532376d71687a6d3267703435656a766a66356a6e6264757570663334626f36766532786f67743571693fa2646970667358221220d0b196244dd148c3690bc874908b48aa62d9d1aecb5196eeae9a93e1350b142564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BaseballBoardGame",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 170,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 176,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 180,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 184,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 190,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1187,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 115,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1986,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)1652_storage"
      },
      {
        "astId": 1988,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "bases",
        "offset": 0,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 1990,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "outs",
        "offset": 1,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 1992,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "totalScore",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1996,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "claimableCounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1999,
        "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
        "label": "pendingPlay",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(PendingPlay)2008_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1652_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1651,
            "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PendingPlay)2008_storage": {
        "encoding": "inplace",
        "label": "struct BaseballBoardGame.PendingPlay",
        "members": [
          {
            "astId": 2001,
            "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
            "label": "batter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2003,
            "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
            "label": "blockNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2005,
            "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
            "label": "contractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2007,
            "contract": "contracts/BaseballBoardGame.sol:BaseballBoardGame",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}